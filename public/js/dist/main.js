(function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) return installedModules[moduleId].exports;
        var module = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.l = true;
        return module.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) Object.defineProperty(exports, name, {
            enumerable: true,
            get: getter
        });
    };
    __webpack_require__.r = function(exports) {
        if ("undefined" !== typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports, Symbol.toStringTag, {
            value: "Module"
        });
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
    };
    __webpack_require__.t = function(value, mode) {
        if (1 & mode) value = __webpack_require__(value);
        if (8 & mode) return value;
        if (4 & mode && "object" === typeof value && value && value.__esModule) return value;
        var ns = Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", {
            enumerable: true,
            value: value
        });
        if (2 & mode && "string" != typeof value) for (var key in value) __webpack_require__.d(ns, key, function(key) {
            return value[key];
        }.bind(null, key));
        return ns;
    };
    __webpack_require__.n = function(module) {
        var getter = module && module.__esModule ? function() {
            return module["default"];
        } : function() {
            return module;
        };
        __webpack_require__.d(getter, "a", getter);
        return getter;
    };
    __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "";
    return __webpack_require__(__webpack_require__.s = "./assets/js/main.js");
})({
    "./assets/js/main.js": function(module, exports) {
        eval("//--------------------------STATE OBJECT----------------------------------------\n//------------------------------------------------------------------------------\nvar gameState = {\n  // PLAYER\n  userPokemon: '',\n  // CPU\n  rivalPokemon: '',\n  // DATABASE TO STORE CHARACTER STATS\n  pokemonDB: [{\n    name: 'charmander',\n    type: 'fire',\n    hp: 39,\n    attack: 52,\n    defense: 43,\n    level: 1,\n    img: 'http://www.smogon.com/dex/media/sprites/xy/charmander.gif'\n  }, {\n    name: 'bulbasaur',\n    type: 'grass',\n    hp: 45,\n    attack: 49,\n    defense: 49,\n    level: 1,\n    img: 'http://www.smogon.com/dex/media/sprites/xy/bulbasaur.gif'\n  }, {\n    name: 'squirtle',\n    type: 'water',\n    hp: 44,\n    attack: 48,\n    defense: 65,\n    level: 1,\n    img: 'http://www.smogon.com/dex/media/sprites/xy/squirtle.gif'\n  }],\n  // GRAB ELEMENTS FROM HTML TO MANIPULATE\n  elements: {\n    pokemonEl: document.querySelector('.select-screen').querySelectorAll('.character'),\n    battleScreenEl: document.getElementById('battle-screen'),\n    attackBtnsEl: document.getElementById('battle-screen').querySelectorAll('.attack')\n  },\n  //--------------------------LOOPS TO RUN GAME-------------------------------\n  //--------------------------------------------------------------------------\n  init: function init() {\n    var i = 0; // INITIAL LOOP TO ASSIGN ALL DATA - GIVES FUNCTION TO ALL CHARACTERS ON SCREEN SELECT\n\n    while (i < gameState.elements.pokemonEl.length) {\n      gameState.elements.pokemonEl[i].onclick = function () {\n        // currently selected pokemon's name\n        var pokemonName = this.dataset.pokemon; // elements for character battle images\n\n        var player1Img = document.querySelector('.player1').getElementsByTagName('img');\n        var player2Img = document.querySelector('.player2').getElementsByTagName('img'); // save the current pokemon\n\n        gameState.userPokemon = pokemonName; // cpu picks a pokemon\n\n        gameState.cpuRandomNum(); // transition from select screen to battle screen\n\n        gameState.elements.battleScreenEl.classList.toggle('active'); // filter through array to find pokemon name that matches pokemonName variable, assign one to player1Img and other to player2Img\n        // current user as chosen by random filtering array\n\n        gameState.currentUserPokemon = gameState.pokemonDB.filter(function (pokemon) {\n          return pokemon.name === gameState.userPokemon;\n        }); // use that user variable to assign to character image\n\n        player1Img[0].src = gameState.currentUserPokemon[0].img; // cpu as chosen by random filtering array\n\n        gameState.currentRivalPokemon = gameState.pokemonDB.filter(function (pokemon) {\n          return pokemon.name === gameState.rivalPokemon;\n        }); // use the cpu/rival variable to assign a character image to cpu\n\n        player2Img[0].src = gameState.currentRivalPokemon[0].img; // filter returns new array with the matching item from original array so since we're using the new array and the only item in it is the matching item from the original the index must be 0 hence the  currentUserPokemon[0].img\n\n        gameState.currentUserPokemon[0].health = gameState.calculateHealth(gameState.currentUserPokemon);\n        gameState.currentUserPokemon[0].originalHealth = gameState.calculateHealth(gameState.currentUserPokemon);\n        gameState.currentRivalPokemon[0].health = gameState.calculateHealth(gameState.currentRivalPokemon);\n        gameState.currentRivalPokemon[0].originalHealth = gameState.calculateHealth(gameState.currentRivalPokemon);\n        console.log(gameState);\n      }; // increment while loop\n\n\n      i++;\n    } // loop through attack buttons and add an onclick to them\n    // initialize counting/looping variable\n\n\n    var a = 0; // create loop and set it to run through length of array\n\n    while (a < gameState.elements.attackBtnsEl.length) {\n      // for each index, add this annonymous onclick function to pull the attack data, assign it to a variable and log it to prove its capturing the proper attack based on whats been clicked (rock, paper, or scissors)\n      gameState.elements.attackBtnsEl[a].onclick = function () {\n        var attackName = this.dataset.attack;\n        gameState.currentUserAttack = attackName; // console.log(gameState.currentUserAttack);\n\n        gameState.play(attackName, gameState.cpuAttack());\n      };\n\n      a++;\n    }\n  },\n  //-------------------GAME LOGIC - ROCK, PAPER, SCISSORS---------------------\n  //--------------------------------------------------------------------------\n  play: function play(userAttack, rivalAttack) {\n    var currentUserPokemon = gameState.currentUserPokemon[0];\n    var currentRivalPokemon = gameState.currentRivalPokemon[0];\n    currentUserPokemon.player = 'user';\n    currentRivalPokemon.player = 'cpu';\n\n    switch (userAttack) {\n      case 'rock':\n        if (rivalAttack === 'paper') {\n          if (currentUserPokemon.health >= 1 && currentRivalPokemon.health >= 1) {\n            // user\n            gameState.attackMove(currentUserPokemon.attack, currentUserPokemon.level, 0.8, 0.5, currentRivalPokemon, currentUserPokemon);\n\n            if (currentRivalPokemon.health >= 1) {\n              // rival\n              gameState.attackMove(currentRivalPokemon.attack, currentRivalPokemon.level, 0.8, 2, currentUserPokemon, currentRivalPokemon);\n              console.log('Paper beats rock - it is super effective against you!');\n            }\n          }\n        } else if (rivalAttack === 'scissors') {\n          if (currentUserPokemon.health >= 1 && currentRivalPokemon.health >= 1) {\n            // user\n            gameState.attackMove(currentUserPokemon.attack, currentUserPokemon.level, 0.8, 2, currentRivalPokemon, currentUserPokemon);\n\n            if (currentRivalPokemon.health >= 1) {\n              // rival\n              gameState.attackMove(currentRivalPokemon.attack, currentRivalPokemon.level, 0.8, 0.5, currentUserPokemon, currentRivalPokemon);\n              console.log('Rock beats scissors - it is super effective!!!');\n            }\n          }\n        } else {\n          if (currentUserPokemon.health >= 1 && currentRivalPokemon.health >= 1) {\n            if (currentUserPokemon.health >= 1 && currentRivalPokemon.health >= 1) {\n              // user\n              gameState.attackMove(currentUserPokemon.attack, currentUserPokemon.level, 0.8, 0.1, currentRivalPokemon, currentUserPokemon);\n\n              if (currentRivalPokemon.health >= 1) {\n                // rival\n                gameState.attackMove(currentRivalPokemon.attack, currentRivalPokemon.level, 0.8, 0.1, currentUserPokemon, currentRivalPokemon);\n              }\n\n              console.log('You both chose rock - it hits you both weakly!');\n            }\n          }\n        }\n\n        break;\n\n      case 'paper':\n        if (rivalAttack === 'rock') {\n          if (currentUserPokemon.health >= 1 && currentRivalPokemon.health >= 1) {\n            if (currentUserPokemon.health >= 1 && currentRivalPokemon.health >= 1) {\n              // user\n              gameState.attackMove(currentUserPokemon.attack, currentUserPokemon.level, 0.8, 2, currentRivalPokemon, currentUserPokemon);\n              console.log('Paper beats rock - you are super effective!');\n\n              if (currentRivalPokemon.health >= 1) {\n                // rival\n                gameState.attackMove(currentRivalPokemon.attack, currentRivalPokemon.level, 0.8, 0.5, currentUserPokemon, currentRivalPokemon);\n              }\n            }\n          } else if (rivalAttack === 'scissors') {\n            if (currentUserPokemon.health >= 1 && currentRivalPokemon.health >= 1) {\n              // user\n              gameState.attackMove(currentUserPokemon.attack, currentUserPokemon.level, 0.8, 0.5, currentRivalPokemon, currentUserPokemon);\n\n              if (currentRivalPokemon.health >= 1) {\n                // rival\n                gameState.attackMove(currentRivalPokemon.attack, currentRivalPokemon.level, 0.8, 2, currentUserPokemon, currentRivalPokemon);\n                console.log('Scissors beats paper - it is super effective against you!');\n              }\n            } else {\n              if (currentUserPokemon.health >= 1 && currentRivalPokemon.health >= 1) {\n                // user\n                gameState.attackMove(currentUserPokemon.attack, currentUserPokemon.level, 0.8, 0.1, currentRivalPokemon, currentUserPokemon);\n\n                if (currentRivalPokemon.health >= 1) {\n                  // rival\n                  gameState.attackMove(currentRivalPokemon.attack, currentRivalPokemon.level, 0.8, 0.1, currentUserPokemon, currentRivalPokemon);\n                }\n\n                console.log('You both chose paper - it hits you both weakly!');\n              }\n\n              break;\n            }\n          }\n        }\n\n      case 'scissors':\n        if (rivalAttack === 'paper') {\n          if (currentUserPokemon.health >= 1 && currentRivalPokemon.health >= 1) {\n            // user\n            gameState.attackMove(currentUserPokemon.attack, currentUserPokemon.level, 0.8, 2, currentRivalPokemon, currentUserPokemon);\n            console.log('Scissors beats paper - you are super effective!');\n\n            if (currentRivalPokemon.health >= 1) {\n              // rival\n              gameState.attackMove(currentRivalPokemon.attack, currentRivalPokemon.level, 0.8, 0.5, currentUserPokemon, currentRivalPokemon);\n            }\n          }\n        } else if (rivalAttack === 'rock') {\n          if (currentUserPokemon.health >= 1 && currentRivalPokemon.health >= 1) {\n            // user\n            gameState.attackMove(currentUserPokemon.attack, currentUserPokemon.level, 0.8, 0.5, currentRivalPokemon, currentUserPokemon);\n\n            if (currentRivalPokemon.health >= 1) {\n              // rival\n              gameState.attackMove(currentRivalPokemon.attack, currentRivalPokemon.level, 0.8, 2, currentUserPokemon, currentRivalPokemon);\n              console.log('Rock beats scissors - it is super effective against you!');\n            }\n          } else {\n            if (currentUserPokemon.health >= 1 && currentRivalPokemon.health >= 1) {\n              // user\n              gameState.attackMove(currentUserPokemon.attack, currentUserPokemon.level, 0.8, 0.1, currentRivalPokemon, currentUserPokemon);\n\n              if (currentRivalPokemon.health >= 1) {\n                // rival\n                gameState.attackMove(currentRivalPokemon.attack, currentRivalPokemon.level, 0.8, 0.1, currentUserPokemon, currentRivalPokemon);\n              }\n\n              console.log('You both chose scissors - it hits you both weakly!');\n            }\n\n            break;\n          }\n        }\n\n    }\n  },\n  //-----------------------------GAME FUNCTIONS-------------------------------\n  //--------------------------------------------------------------------------\n  // GENERATE ENEMY ATTACK TYPE (ROCK PAPER OR SCISSORS)\n  cpuAttack: function cpuAttack() {\n    var attacks = ['rock', 'paper', 'scissors'];\n    return attacks[gameState.generateRandomNum()];\n  },\n  // HEALTH\n  calculateHealth: function calculateHealth(user) {\n    return 0.2 * Math.sqrt(user[0].level) * user[0].defense * user[0].hp;\n  },\n  // CALCULATE ATTACK DAMAGE, PRINT REMAINING HEALTH,\n  attackMove: function attackMove(attack, level, stack, critical, enemy, attacker) {\n    console.log(enemy.name + ' before: ' + Math.round(enemy.health));\n    var attackAmount = attack * level * (stack + critical);\n    enemy.health = enemy.health - attackAmount;\n    console.log(enemy.name + ' after: ' + Math.round(enemy.health)); // This is block of code is throwing an error - it should target the HTML to visually decrease the health bar upon damage taken. However, this is returning undefined.\n    // var userHP = document\n    // \t.querySelector('.player-1')\n    // \t.querySelector('.stats')\n    // \t.querySelector('.health')\n    // \t.querySelector('.health-bar')\n    // \t.querySelector('.inside');\n    // var cpuHP = document\n    // \t.querySelector('.player-2')\n    // \t.querySelector('.stats')\n    // \t.querySelector('.health')\n    // \t.querySelector('.health-bar')\n    // \t.querySelector('.inside');\n    // if (enemy.player === 'user') {\n    // \tvar minusPercent = (enemy.health * 100) / enemy.originalHealth;\n    // \tuserHP.style.width = (minusPercent < 0 ? 0 : minusPercent) + '%';\n    // } else {\n    // \tvar minusPercent = (enemy.health * 100) / enemy.originalHealth;\n    // \tcpuHP.style.width = (minusPercent < 0 ? 0 : minusPercent) + '%';\n    // }\n\n    gameState.checkWinner(enemy, attacker);\n  },\n  //CHECK FOR WINNER IF EITHER FAINTS\n  checkWinner: function checkWinner(enemy) {\n    if (enemy.health <= 0) {\n      console.log('You are the very best like no one ever was!!!!');\n    }\n  },\n  // GENERATE RANDOM NUMBER FROM 0 TO 2 (0, 1, 2)\n  generateRandomNum: function generateRandomNum() {\n    return Math.floor(Math.random() * 3);\n  },\n  // USE RANDOM NUMBER TO BLIND PICK A POKEMON FROM HTML DATA(SET) VALUES AS OPPONENT\n  cpuRandomNum: function cpuRandomNum() {\n    return gameState.rivalPokemon = gameState.elements.pokemonEl[gameState.generateRandomNum()].dataset.pokemon;\n  }\n};\ngameState.init(); // // pokemon\n// // create data for 3 different pokemons, with their names, type, weaknesses, health, and attack moves(name, attack stat, maximum)\n// var pokemons = [\n// \t{\n// \t\tname: 'charmander',\n// \t\ttype: 'fire',\n// \t\tattack: 52,\n// \t\tstamina: 39,\n// \t\tlevel: 1\n// \t},\n// \t{\n// \t\tname: 'charmander',\n// \t\ttype: 'fire',\n// \t\tattack: 52,\n// \t\tstamina: 39,\n// \t\tlevel: 1\n// \t}\n// ];\n// var attack = 20;\n// var level = 10;\n// var stack = 1.3;\n// var stamina = 39;\n// // create a formula for attacks\n// console.log((attack * level * stack) / 7);\n// // create a formula for health\n// //HP = 0.20 x Sqrt(Pokemon_level) x (HP_base_stat)\n// console.log(0.2 * Math.sqrt(level) * stamina * 15);\n// // let user choose 1 and then assign a random pokemon to battle thats not the users pokemon\n// // p1 vs p2\n\n//# sourceURL=webpack:///./assets/js/main.js?");
    }
});